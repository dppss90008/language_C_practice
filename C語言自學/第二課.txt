資料型別 Data type
1. 資料如何儲存
    * 電腦儲存空間以位元組Byte為單位組成
    * 一個位元組由8個位元bit組成
    * bit 可以表示0 or 1
    * 資料以01所組成
    * 隨身碟可不可以存影片? 原因:任何資料會轉換0or1
2. 資料如何運算
3. 資料型別決定如何儲存如何計算
4. 常見的資料型別 int 整數 大小: 4個位元組
    ex. 32 這個數字由4個位元組所儲存 4*8 = 32個0跟1
    字元char 大小 1個位元組
    浮點數 float double (小數): 單精度 倍精度
    短整數 整數 長整數: 佔據資料大小不同

大小: sizeof查看所占記憶體大小
定義變數 資料型別 變數名稱 int num;
* 電腦在記憶體中開一個4 byte空間取名為num
* print num 值: 什麼都有可能=> 未定義行為
* 初始化: int num = 0;
* 為何不預設: 額外動作有代價,需要花時間
* 變數名稱限制:數字不能開頭,字母大小有差,有特殊用途保留字不可用
* ex int int;
* 整數拿來存整數,字元拿來存字元
* 表示原理不同,字元與浮點數
* 短整數常整數表示值的範圍不同
* 精準度不一樣: 單精準,倍精準
* 有無正負號不同: unsigned int

# 整數
* 一個位元bit可以儲存0或1
* 一個位元組可以儲存8個位元 0000 0000
* 一個位元有幾種可能:2個 (不是存0就是1) 
* 一個位元組有幾種可能: 2^8 = 256種不同組合
* 無號數: 0-255數字?缺點: 不能有負數不方便
* 有號數: -128-127
* 二進位表示法   0 : 00000000
                1 : 00000001
                2 : 00000010
                3 : 00000011
* 4 個位元組組成int = 4*8個位元 = 32
* 因此有 2^32 = 4,294,967,296種不同整數 giga
* +- 2 giga 的值
* 短整數 2個位元組(無特殊需求就用int,如果對記憶體要求用short int)
* 實作定義
* 整數溢位overflow 10000*10000*10000 ? 無法存在int
* 超出就會造成未定義行為(無法預期會發生什麼事)
* 大數問題: long int 取代 int ; long long int
* 更大的數值: 陣列

# 浮點數 floating point
* 整數 0-1之間有多少整數? 沒有
* 實數 0-1之間有多少? 無窮多個
* 要多大的空間才能儲存? 無窮大的記憶體
* 要多大的空間才能存圓周率 3.14159265....? 無窮大的空間
* 選擇性使用某種實數: 使用約略值: 3.14
* 計算時會有誤差?該怎麼辦: 無法精確表示
* 浮點數用來表示實數的方法
* 可以表示小數數值,表示一個約略值
* 一樣的記憶體情況下4個位元組可以存將近40位數
* 可以想成科學記號表示法
* 有效數字: 3.141 or 3.142 四位有效(無條件捨去,4捨5入)
* 位數越多表示越精確,當然需占更大的記憶體
* 科學記號表示法 123.45 = 1.2345 * 10^2
* 1.23 (取三位有效) * 10^2 => 數字是對的 接近的
* 存 1 2 3 (有效數字) 與 2 (指數) => 變成存兩個整數的問題
* 12345000000 = 1.2345 * 10^10 = 1.23 * 10^10
* 存 1 2 3 與 10 (實質上有誤差但可以表示溢位數字,可以表示範圍大)
* 0.0078901 = 7.8901 * 10^-3 = 789 與 -3
* 可以表示很大的數也可以表示很小的數,雖然有誤差
* float 4 double 8 (主要選double)
* 注意: 依然可能會溢位
* 可以自然表示小數,範圍比整數廣,但是表示約略值,因此有點誤差
* 運算效率不好, 專門浮點數運算硬體去運算

# 如何使用 printf and scanf
1. 資訊輸入與輸出 I/O
2. 輸入裝置: 鍵盤滑鼠 ; 輸出裝置: 螢幕喇叭
3. printf() -> 標準化輸出的內建函式
4. 格式字串: 印特殊符號 
    * int Sum = 10;
    * printf("Sum is %d",Sum)

    int a = 123456789;
	unsigned int b = 3000000000;
		
	printf("%d\n",a);
	// 溢位 
	printf("%d\n",b);
	printf("%u\n",b); //要使用相對應格式符

    float, double => %f 精確度低
    float a = 123.45;
    double b = 123.45;
    printf("%f\n",a); 123.449997
    printf("%f\n",b); 123.450000
5. scanf() -> 標準化輸入的內建函式
    語法: scanf("%d",&a);
    &a 取得變數a的記憶體位置
6. 如果使用者亂輸入的時候? 更複雜技術去處理

2020-1-14 完成到 2.3課












